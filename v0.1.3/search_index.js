var documenterSearchIndex = {"docs":
[{"location":"#ZarrDatasets","page":"Home","title":"ZarrDatasets","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"See the documentation of JuliaGeo/CommonDataModel.jl for the full documentation of the API. As a quick reference, here is an example how to create and read a Zarr file store as a quick reference.","category":"page"},{"location":"#Create-a-Zarr-file-store","page":"Home","title":"Create a Zarr file store","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The following example create a Zarr file store in the directory \"/tmp/test-zarr\":","category":"page"},{"location":"","page":"Home","title":"Home","text":"using ZarrDatasets\n\n# sample data\ndata = [i+j for i = 1:3, j = 1:5]\n\ndirectoryname = \"/tmp/test-zarr\"\nmkdir(directoryname)\n\nds = ZarrDataset(directoryname,\"c\")\ndefDim(ds,\"lon\",size(data,1))\ndefDim(ds,\"lat\",size(data,2))\nzv = defVar(ds,\"varname\",Int64,(\"lon\",\"lat\"))\nzv[:,:] = data\nzv.attrib[\"units\"] = \"m\"\nclose(ds)","category":"page"},{"location":"#Loading-a-Zarr-file-store","page":"Home","title":"Loading a Zarr file store","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The data and units can be loaded by indexing the data set structure ds.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using ZarrDatasets\ndirectoryname = \"/tmp/test-zarr\"\nds = ZarrDataset(directoryname)\ndata = ds[\"varname\"][:,:]\ndata_units = ds[\"varname\"].attrib[\"units\"]","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [ZarrDatasets]","category":"page"},{"location":"#ZarrDatasets.ZarrDataset","page":"Home","title":"ZarrDatasets.ZarrDataset","text":"ds = ZarrDataset(url::AbstractString,mode = \"r\";\n                 _omitcode = [404,403],\n                 maskingvalue = missing)\nZarrDataset(zg::Zarr.ZGroup; _omitcode, maskingvalue)\nZarrDataset(f::Function,url::AbstractString,mode = \"r\";\n                 maskingvalue = missing)\n\nOpen the zarr dataset at the url or path url. The mode can be \"r\" (read-only), \"w\" (write), or \"c\" (create). ds supports the API of the JuliaGeo/CommonDataModel.jl. The experimental _omitcode allows to define which HTTP error code should be used for missing chunks. For compatibility with python's Zarr, the HTTP error 403 (permission denied) is also used to missing chunks in addition to 404 (not found).\n\nThe parameter maskingvalue allows to define which special value should be used as replacement for fill values. The default is missing.\n\nExample:\n\nusing ZarrDatasets\nurl = \"https://s3.waw3-1.cloudferro.com/mdl-arco-time-035/arco/MEDSEA_MULTIYEAR_PHY_006_004/med-cmcc-ssh-rean-d_202012/timeChunked.zarr\"\nds = ZarrDataset(url);\n# see the metadata\ndisplay(ds)\n# load the variable time\ntime = ds[\"time\"][:]\n# load the the attribute long_name for the variable zos\nzos_long_name = ds[\"zos\"].attrib[\"long_name\"]\n# load the global attribute\ncomment = ds.attrib[\"comment\"]\n# query the dimension of the variable zos\nsize(ds[\"zos\"])\nclose(ds)\n\nExample with a do-block:\n\nusing ZarrDatasets\nurl = \"https://s3.waw3-1.cloudferro.com/mdl-arco-time-035/arco/MEDSEA_MULTIYEAR_PHY_006_004/med-cmcc-ssh-rean-d_202012/timeChunked.zarr\"\n\nzos1 = ZarrDataset(url) do ds\n  ds[\"zos\"][:,:,end,1]\nend # implicit call to close(ds)\n\n\n\n\n\n","category":"type"},{"location":"#CommonDataModel.defVar-Tuple{ZarrDatasets.ZarrDataset, Union{AbstractString, Symbol}, DataType, Any}","page":"Home","title":"CommonDataModel.defVar","text":"defVar(ds::ZarrDataset,name::SymbolOrString,vtype::DataType,dimensionnames; chunksizes=nothing, attrib = Dict(), fillvalue = nothing)\n\nCreate a variable name in the dataset ds with the type vtype and the dimension dimensionnames.\n\nFor coordinate variables, fill values will be used a background value of undefined chunks and not as missing value as coordinate variables cannot have the _FillValues in the CF convension as in Zarr v2 format a fill_value does not necessarily indicate a missing value.\n\nSee also CommonDataModel.defVar for more information.\n\n\n\n\n\n","category":"method"},{"location":"#Differences-between-Zarr-and-NetCDF-files","page":"Home","title":"Differences between Zarr and NetCDF files","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"All metadata (in particular attributes) is stored in JSON files for the Zarr format with the following implications:\nJSON does not distinguish between integers and real numbers. They are all considered as generic numbers. Whole numbers are loaded as Int64 and real numbers Float64. It is not possible to store the number 1.0 as a real number.\nThe order of keys in a JSON document is undefined. It is therefore not possible to have a consistent ordering of the attributes or variables.\nThe JSON standard does not allow the values NaN, +Inf, -Inf which is problematic for attributes (zarr-python #412,   zarr-specs #81). However, there is a special case for the fill-value to handle NaN, +Inf and -Inf.\nAll dimensions must be associated to Zarr variables.","category":"page"}]
}
